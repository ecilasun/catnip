// GrimR language test file

word loword;
byteptr VRAM = 0x0;

byte sprite[] = {
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0B, 0x13, 0x53, 0x0B, 0x13, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x13, 0x4E, 0x4E, 0x06, 0x6E, 0x0E, 0x04, 0xEE, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x4E, 0x0E, 0x4E, 0x4E, 0x67, 0x7F, 0xFF, 0x0B, 0xAE, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0x13, 0x04, 0x97, 0x4E, 0x4E, 0x01, 0x09, 0x13, 0x53, 0x00, 0x09, 0xEE, 0xFF, 0xFF, 
    0xFF, 0xFF, 0x13, 0x04, 0x4E, 0x8F, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF6, 0xFF, 
    0xFF, 0xFF, 0x00, 0xF7, 0x00, 0x09, 0x00, 0x56, 0x00, 0x16, 0x00, 0x0C, 0xAC, 0xEE, 0xAC, 0xF6, 0xFF, 
    0xFF, 0x13, 0xAE, 0x26, 0xAE, 0x00, 0x16, 0xF7, 0x00, 0xEF, 0x00, 0xAE, 0x6E, 0x24, 0xF7, 0xFF, 0xFF, 
    0xFF, 0x01, 0xEF, 0x09, 0xFF, 0x00, 0x01, 0xFF, 0xA4, 0xFF, 0x64, 0xF7, 0xAE, 0x6E, 0x64, 0xF6, 0xFF, 
    0xFF, 0x01, 0x0B, 0x27, 0xFF, 0x00, 0xA4, 0xFF, 0x13, 0xAF, 0xAF, 0xAF, 0xAF, 0xEF, 0x14, 0x6E, 0xFF, 
    0xFF, 0x64, 0x00, 0x0B, 0xF7, 0x03, 0xFF, 0x13, 0x00, 0x03, 0x0B, 0x0B, 0x0B, 0x0B, 0x54, 0xF7, 0xFF, 
    0xFF, 0xFF, 0x63, 0x00, 0x27, 0x16, 0xF7, 0x0B, 0x14, 0x00, 0x00, 0x00, 0x00, 0x09, 0xF6, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xA3, 0x09, 0x0C, 0x16, 0x16, 0x26, 0x0B, 0x00, 0x53, 0x63, 0xF6, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xAE, 0x03, 0x8E, 0x16, 0x51, 0x13, 0x6C, 0xA1, 0xEC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0x00, 0x56, 0x0B, 0x0F, 0xA0, 0xEC, 0xFC, 0xFC, 0xA3, 0xE4, 0xF6, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0x01, 0x6E, 0x6C, 0x6E, 0x11, 0xFF, 0xFF, 0xF3, 0xFF, 0x91, 0xEC, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0x0B, 0xFF, 0xFF, 0xF6, 0x0B, 0xF6, 0xF6, 0xF4, 0xFE, 0x89, 0xEC, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0x03, 0xFF, 0xFF, 0x03, 0xE9, 0xA1, 0x88, 0xAB, 0xE9, 0x93, 0xF6, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0x24, 0xB6, 0xF7, 0x13, 0x63, 0x51, 0x49, 0x50, 0x93, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x14, 0x14, 0x14, 0x11, 0x0B, 0x13, 0x64, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x13, 0x09, 0x0B, 0x6E, 0x00, 0x6C, 0x00, 0xAC, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x09, 0x49, 0x11, 0x09, 0x11, 0x09, 0x09, 0xEE, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

def TileSprite(word posX, word posY, word width, word height)
{   // GrimR: Input parameters are pulled from stack into autogenerated function-local variables

    // GrimR: Current default behavior for all variables is 'static'
    word spanX, spanY;

    spanY = posY;
    while (spanY<posY+height)
    {
        spanX = posX;
        while (spanX<posX+width)
        {
            VRAM[(0x8000<<16) | (spanX + spanY*256)] = sprite[(spanY%23)*17+(spanX%17)];
            spanX = spanX+1;
        }
        spanY = spanY+1;
    }
    return;
}

def main()
{
    fsel(0); // Switch writes to frame 0, show frame 1
 
    clf(0xFF); // Clear framebuffer

    // GrimR: Any expression can be used as input parameter to function call
    TileSprite(32,48,17,23);
    TileSprite(96,64,17,23);
    TileSprite(131,131,96,48);

    fsel(1); // Switch writes to frame 1, show frame 0

    vsync(); // Wait for vsync

    return;
}
