// GrimR language test file

// GrimR: Symbol table will include all globals and function-local variables with autogenerated, scoped names
// GrimR: All types of variables are always 4 byte aligned in the symbol table

// GrimR: Currently the widest built-in type is a DWORD. Currently all math will promote values to a DWORD.
dword cursorX, cursorY;

// GrimR: Type of a variable can be shorter than the data it contains.
// In this case, if used as a true byte, VRAM will read low 8 bits.
// However when promoted to array access using [] operator, it will use this value as its memory address.
byte VRAM=0x80000000;

// GrimR: Auto-sized and uninitialized arrays are supported. Uninitialized variables always contain 0xCD at runtime.
dword banana[16], tree[] = {1,2,3,4};

// GrimR: Function input parameters support type aliasing, therefore one can pass a byte array as a dword array into a function.
byte sprite[] = {
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
    0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x51, 0x00, 
    0xFF, 0xFF, 0xFF, 0x00, 0x9A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x51, 0x00, 
    0xFF, 0xFF, 0xFF, 0x00, 0x9A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x51, 0x00, 
    0xFF, 0xFF, 0xFF, 0x00, 0x9A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x51, 0x00, 
    0xFF, 0xFF, 0xFF, 0x00, 0x9A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x51, 0x00, 
    0xFF, 0xFF, 0xFF, 0x00, 0x9A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x51, 0x00, 
    0xFF, 0xFF, 0xFF, 0x00, 0x9A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x51, 0x51 };

def test(dword thing)
{
    dword result;
    result = thing[0] + thing[1];
    return;
}

def DrawRect(word posX, word posY, word width, word height)
{   // GrimR: Input parameters are pulled from stack into autogenerated function-local variables

    // GrimR: Current default behavior for all variables is 'static'
    word spanX, spanY;

    spanY = posY;
    while (spanY<posY+height)
    {
        spanX = posX;
        while (spanX<posX+width)
        {
            // GrimR: Array operator can alias a variable as a pointer at that address if used on a non-array integer.
            VRAM[spanX + spanY*320] = sprite[(spanX%16) + (spanY%8)*16];
            spanX = spanX+1;
        }
        spanY = spanY+1;
    }
    return;
}

def main()
{
    // GrimR: Any expression can be used as input parameter to function call
    DrawRect(tree[2],0,512+3-cursorY,384);

    // GrimR: Snoop a function's local variable
    if (DrawRect:spanX > 64)
    {   // GrimR: if/while always expects { }
        dword A,B;
        test(1);
        A = test:result*2;
    }

    return;
}
